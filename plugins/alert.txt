
<template>
  <div v-if="isVisible" class="online-status" :class="{ 'online': online, 'offline': !online }">
    <p>{{ message }}</p>
  </div>
</template>

<script>
export default {
  data() {
    return {
      isVisible: false,
      online: navigator.onLine,
      initialOnline: null,
      message: ''
    };
  },
  created() {
    // Listen for online/offline events
    window.addEventListener('online', this.updateOnlineStatus);
    window.addEventListener('offline', this.updateOnlineStatus);
    
    // Check initial online status after a short delay to allow other components to mount first
    setTimeout(() => {
      this.checkInitialOnlineStatus();
    }, 500);
  },
  destroyed() {
    // Cleanup event listeners
    window.removeEventListener('online', this.updateOnlineStatus);
    window.removeEventListener('offline', this.updateOnlineStatus);
  },
  methods: {
    checkInitialOnlineStatus() {
      this.initialOnline = navigator.onLine;
      if (!this.initialOnline) {
        this.showMessage('You are offline!');
      }
    },
    updateOnlineStatus() {
      if (this.initialOnline === null) {
        // Initial online status check hasn't been performed yet
        return;
      }
      
      const currentOnline = navigator.onLine;
      if (currentOnline !== this.online) {
        this.online = currentOnline;
        if (this.online) {
          this.showMessage('Back online');
        } else {
          this.showMessage('You are offline!');
        }
      }
    },
    showMessage(msg) {
      this.isVisible = true;
      this.message = msg;
      this.autoHideAlert();
    },
    autoHideAlert() {
      setTimeout(() => {
        this.isVisible = false;
      }, 5000);
    }
  }
};
</script>

<style>
.online-status {
  /* width:130px; */
  /* height: 50px; */
  position: fixed;
  top: 80px;
  right: 20px;
  background-color: #fff;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  display: flex;
  align-items: center;
  /* vertical-align:center; */
  justify-content: space-between;
  transition: opacity 0.3s;
  /* text-align: center; */
}

.online {
  background-color: #2ecc71;
  color: #fff;
  font-weight:bold;
  text-align: center;
  vertical-align:center;
}

.offline {
  background-color: #e74c3c;
  color: #fff;
  font-weight:bold;
  text-align: center;
  vertical-align:center;
}

.close-button {
  border: none;
  background: none;
  cursor: pointer;
}
</style>




// async function onSubmit() {
//   const result = await v$.value.$validate();

//   if (!result) {
//     // notify user form is invalid
//     return;
//   }
//   const foundUser = users.find((user) => user.username === username.value);
//   const foundPassword = users.find((user) => user.password === password.value);

//   if(!(foundUser && foundPassword )){
//     Swal.fire({
//   title: 'Failed!',
//   text: 'Invalid Credentials',
//   icon: 'error',
//   timer: 1500,
//   showConfirmButton: false,

// }) 

//     return;
//   }else {
//   // Go to dashboard
//    auth =true;
//   router.push({ path: "/backend/Dashboardview" });
//   Swal.fire({
//   icon: "success",
//   title: "Logged in ",
//   showConfirmButton: false,
//   timer: 1500
//   // confirmButtonText: 'Try again'
//   });
  
 
// }
// return { username, password, validationRules, v$, onSubmit };
// }




 // return {
        //     success: false,
        //     message: 'An error occurred while logging in'
        // };


    '~/plugins/axios.ts'
        