# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
dist

# Node dependencies
node_modules

# Logs
logs
*.log

# Misc
.DS_Store
.fleet
.idea

# Local env files
.env
.env.*
!.env.example



<form @submit.prevent="onSubmit">
                <div class="py-3">
                  <div class="mb-4">
                    <input
                      type="text"
                      class="form-control form-control-lg form-control-alt"
                      id="login-username"
                      name="login-username"
                      placeholder="Username"
                      :class="{
                        'is-invalid': v$.username.$errors.length,
                      }"
                      v-model="username"
                      @blur="v$.username.$touch"
                      :rules="validationRules.username"
                    />
                    <div
                      v-if="v$.username.$errors"
                      class="invalid-feedback animated fadeIn"
                    >
                      Please enter your username
                    </div>
                  </div>
                  <div class="mb-4">
                    <input
                      type="password"
                      class="form-control form-control-lg form-control-alt"
                      id="login-password"
                      name="login-password"
                      placeholder="Password"
                      :class="{
                        'is-invalid': v$.password.$errors.length,
                      }"
                      v-model="password"
                      @blur="v$.password.$touch"
                      :rules="validationRules.password"
                    />
                    <div
                      v-if="v$.password.$errors"
                      class="invalid-feedback animated fadeIn"
                    >
                      Please enter your password
                    </div>
                  </div>
                  <div class="mb-4">
                    <div
                      class="d-md-flex align-items-md-center justify-content-md-between"
                    >
                      <div class="form-check">
                        <input
                          class="form-check-input"
                          type="checkbox"
                          value=""
                          id="login-remember"
                          name="login-remember"
                        />
                        <label class="form-check-label" for="login-remember"
                          >Remember Me</label
                        >
                      </div>
                      <div class="py-2">
                        <NuxtLink
                          to="/auth/Reminder2View"
                          class="fs-sm fw-medium"
                          >Forgot Password?</NuxtLink
                        >
                      </div>
                    </div>
                  </div>
                </div>

                <div class="row justify-content-center">
                  <div class="col-lg-6 col-xxl-5">
                    <button type="submit" class="btn w-100 btn-alt-primary">
                      <i class="fa fa-fw fa-sign-in-alt me-1 opacity-50"></i>

                      sign in
                    </button>
                  </div>
                </div>
              </form>


              <Button :disabled="isLoading" type="submit" class="btn w-100 btn-alt-primary">
                           <i class="fa fa-fw fa-sign-in-alt me-1 opacity-50"></i>
                            {{ variant === "LOGIN" ? "Sign In" : "Register" }}
                      </Button>


                       <NuxtParticles id="tsparticles" :options ="options" @load="onLoad">
  </NuxtParticles>




const v$ = useVuelidate(validationRules, { username, password });

// On form submission
async function onSubmit() {

  const result = await v$.value.$validate();
  if (!result) {
    // notify user form is invalid
    return;
  }

  // alert(`name ${username.value} password: ${password.value}`)
  try {
    const success = await store.dispatch("auth/login", {
      username: username.value,
      password: password.value,
    });

    if (success) {
      router.push({ path: "/backend/Dashboardview" });

      Swal.fire({
        icon: "success",
        title: "Logged in ",
        showConfirmButton: false,
        timer: 1500,
      });
    } else {
      Swal.fire({
        title: "Failed!",
        text: "Invalid Credentials",
        icon: "error",
        timer: 1500,
        showConfirmButton: false,
      });
    }
  } catch (error) {
    console.error("Error logging in:", error);
    Swal.fire({
      title: "Failed!",
      text: "An error occurred while logging in sorry",
      icon: "error",
      timer: 1500,
      showConfirmButton: false,
    });
  }
}




  <div
                      v-if="v$.username.$errors"
                      class="invalid-feedback animated fadeIn"
                    >
                      Please enter your username
                    </div>


                    <div
                      v-if="v$.password.$errors"
                      class="invalid-feedback animated fadeIn"
                    >
                      Please enter your password
                    </div>

                      @blur="v$.username.$touch"

                      :class="{
                        'is-invalid': v$.username.$errors.length,
                      }"






const swlf = () => {
  const Toast = Swal.mixin({
    toast: true,
    position: "top-center",
    showConfirmButton: false,
    timer: 3000,
    timerProgressBar: true,
    didOpen: (toast) => {
      toast.onmouseenter = Swal.stopTimer;
      toast.onmouseleave = Swal.resumeTimer;
    }
  });
Toast.fire({
  icon: "success",
  title: "Signed in successfully"
});
}




